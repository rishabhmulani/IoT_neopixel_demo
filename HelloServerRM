//------------- RISHABH's code for IoT automated neopixel lights -----------//
//------------- ADAPTED FROM BITLUNI's HOME AUTOMATION PROJECT -------------//
//------------ https://github.com/bitluni/bitluniHomeAutomation ------------//

#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <Adafruit_NeoPixel.h>
#include "Fader.h"
#include "PinStates.h"
#include "LedStates.h"
#include "RainbowFunction.h"
#include "SimpleRGBFunction.h"
#include "WaveFunction.h"
#include "RF.h"

#define PIN D1
Adafruit_NeoPixel strip = Adafruit_NeoPixel(MAX_LED_COUNT, PIN, NEO_GRB + NEO_KHZ800);
const char* ssid = "Rishabh";
const char* password = "rish1792";
const int led = 13;
ESP8266WebServer server(80);
const int RF_OSC = 200;

LedStates currentLedStates(strip);
LedStates targetLedStates(strip);
Fader<LedStates> ledFader(currentLedStates, targetLedStates);
PinStates currentPinStates;
PinStates targetPinStates;
Fader<PinStates> pinFader(currentPinStates, targetPinStates);

void handleRoot() {
  String message = "<html><head><title>ESP8266MOD Testing</title></head><body style='font-family: sans-serif; font-size: 12px'><h1>IS590IN IOT: Home Automation Demo!</h1>";
  message += "Hi! You have reached the our local server, so we hope you are ready to experience IOT, LIVE! Please use the following functions and see the neopixel LEDs change:<br><br>";
  message += "<a href='/rainbow?fade=3000'>/rainbow</a> Make the LED strip look like a rainbow<br>";
  message += "<a href='/wave?r=255&g=32&b=10&fade=5000'>/wave</a> A slow wave animation on LED on base color specified by arguments: r=<0..255> g=<0..255> b=<0..255><br>";
  message += "<a href='/setleds?r=32&g=64&b=32&fade=1000'>/setleds</a> Sets LEDs to a specific color defined by the arguments: r=<0..255> g=<0..255> b=<0..255><br>";
  message += "<a href='/ledsoff?fade=500'>/ledsoff</a> Turns off LEDs<br>";
  //message += "All functions except togglepins and rf support the argument 'fade' which specifies the milliseconds it takes to fade to the new specified state. ...nice blending ;-)<br>";
  message += "<br>Syntax to be used to execute the above commands: http://&ltip>/&ltcommand>?&ltargument1>=&ltvalue1>&&ltargument2>=&ltvalue2>&...<br>";
  message += "Click on each link to see an example!<br><br>";
  message += "A BIG Thank you to bitlunis lab! Check out <a href='http://youtube.com/bitlunislab'>bitlunis lab</a> on YouTube!</body></html>";
  message += "<br>Another BIG Thank you and shoutout to the Champaign Urbana Community FAB LAB, special mention to Brandon, Emily, Max and Amanda who helped me figure my way around the Arduino at the lab!";
  message += "<br><br>Have fun exploring! -Rishabh";
  server.send(200, "text/html", message);
}

void handleNotFound(){
  String message = "File Not Found\n\n";
  message += "URI: ";
  message += server.uri();
  message += "\nMethod: ";
  message += (server.method() == HTTP_GET)?"GET":"POST";
  message += "\nArguments: ";
  message += server.args();
  message += "\n";
  for (uint8_t i=0; i<server.args(); i++){
    message += " " + server.argName(i) + ": " + server.arg(i) + "\n";
  }
  server.send(404, "text/plain", message);
}

int getArgValue(String name)
{
  for (uint8_t i = 0; i < server.args(); i++)
    if(server.argName(i) == name)
      return server.arg(i).toInt();
  return -1;
}

bool checkFadeAndSetLedFunction(LedFunction *f)
{
  int fade = getArgValue("fade");
  if(fade > -1)
  {
    targetLedStates.setFunction(f);
    ledFader.start(fade);
  }
  else
    currentLedStates.setFunction(f);  
}

void handleRf()
{
  const int pinNumbers[] = {D0, D1, D2, D3, D4, D5, D6, D7, D8};
  int pin = getArgValue("D");
  int t = getArgValue("t");
  if(t == -1) t = RF_OSC;
  int id = getArgValue("id");
  int ch = getArgValue("channel");
  int on = getArgValue("on");
  String out = "rf D";
  out += pin;
  out += " ";
  out += t;
  out += " ";
  out += id;
  out += " ";
  out += ch;
  out += " ";
  out += on;
  pinMode(pinNumbers[pin], OUTPUT);
  for(int i = 0; i < 5; i++)
    rfWriteCode(pinNumbers[pin], t, id, (1 << (ch + 1)) | (on > 0? 1: 0));
  server.send(200, "text/plain", out);  
}

void setup(void){
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  Serial.println("");

  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  //find it as http://lights.local
  /*if (MDNS.begin("lights")) 
  {
    Serial.println("MDNS responder started");
  }*/
  
  server.on("/", handleRoot);

  server.on("/rainbow", [](){
    server.send(200, "text/plain", "rainbow");
    checkFadeAndSetLedFunction(new RainbowFunction());
  });

  server.on("/wave", [](){
    server.send(200, "text/plain", "wave");
    WaveFunction *f = new WaveFunction();
    f->init(server);
    checkFadeAndSetLedFunction(f);
  });

  server.on("/setleds", [](){
    server.send(200, "text/plain", "setleds");
    SimpleRGBFunction *f = new SimpleRGBFunction();
    f->init(server);
    checkFadeAndSetLedFunction(f);
  });

  server.on("/ledsoff", [](){
    server.send(200, "text/plain", "ledsoff");
    checkFadeAndSetLedFunction(new SimpleRGBFunction());
  });

  server.on("/togglepins", [](){
    server.send(200, "text/plain", "togglepins");
    currentPinStates.toggle();
    currentPinStates.commit();
  });
  
  server.on("/setpins", [](){
    server.send(200, "text/plain", "setpins");
    int fade = getArgValue("fade");
    if(fade > -1)
    {
      targetPinStates.loadValues(server);
      pinFader.start(fade);
    }
    else
    {
      currentPinStates.loadValues(server);
      currentPinStates.commit();
    }
  });

  server.on("/pinsoff", [](){
    server.send(200, "text/plain", "pinsoff");
    currentPinStates.setAllTo(0);
    currentPinStates.commit();
  });

  server.on("/rf", handleRf);
  
  server.onNotFound(handleNotFound);

  server.begin();
  Serial.println("HTTP server started");
  
  strip.begin();
  strip.show(); // Initialize all pixels to 'off'
}

void loop(void)
{
  server.handleClient();
  //MDNS.update();
  currentLedStates.render();
  if(ledFader.active)
    targetLedStates.render();
  if(!ledFader.fade())
    currentLedStates.commit();
  pinFader.fade();
}
